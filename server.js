const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const nodemailer = require('nodemailer');

const app = express();
const port = process.env.PORT || 3001;

app.use(cors());
app.use(bodyParser.json());

// üìå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
const db = new sqlite3.Database('./focused.db', (err) => {
  if (err) console.error('‚ùå DB error:', err.message);
  else console.log('üü¢ SQLite connected');
});

// üìå –¢–∞–±–ª–∏—Ü—ñ
db.run(`CREATE TABLE IF NOT EXISTS students (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT, surname TEXT, dob TEXT,
  email TEXT UNIQUE, password TEXT,
  avatar TEXT, learning_style TEXT, support_tools INTEGER
)`);

db.run(`CREATE TABLE IF NOT EXISTS interactions (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  student_id INTEGER, type TEXT, time_spent INTEGER,
  result TEXT, emotion TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)`);

db.run(`CREATE TABLE IF NOT EXISTS parents (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  parent_name TEXT,
  parent_email TEXT,
  child_email TEXT
)`);

// üìå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
app.post('/register-student', (req, res) => {
  const { name, surname, dob, email, password, avatar, learning_style, support_tools } = req.body;
  if (!email || !password || !name || !surname) return res.status(400).send('–û–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è');
  const hashed = bcrypt.hashSync(password, 10);
  db.run(`
    INSERT INTO students (name, surname, dob, email, password, avatar, learning_style, support_tools)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
    [name, surname, dob, email, hashed, avatar, learning_style, support_tools ? 1 : 0],
    function (err) {
      if (err) return res.status(409).send('Email –≤–∂–µ —ñ—Å–Ω—É—î');
      res.send('‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞');
    });
});

// üìå –í—Ö—ñ–¥
app.post('/login', (req, res) => {
  const { email, password } = req.body;
  db.get(`SELECT * FROM students WHERE email = ?`, [email], (err, row) => {
    if (!row || !bcrypt.compareSync(password, row.password)) {
      return res.status(401).json({ success: false, message: '–ù–µ–≤—ñ—Ä–Ω–∞ –ø–æ—à—Ç–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å' });
    }
    res.json({ success: true, student: { id: row.id, name: row.name, avatar: row.avatar, learning_style: row.learning_style } });
  });
});

// üìå –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
app.post('/interaction', (req, res) => {
  const { student_id, type, time_spent, result, emotion } = req.body;
  db.run(`INSERT INTO interactions (student_id, type, time_spent, result, emotion) VALUES (?, ?, ?, ?, ?)`,
    [student_id, type, time_spent, result, emotion], (err) => {
      if (err) return res.status(500).send('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
      res.send('‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å');
    });
});

// üìå –î–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞—Ç—å–∫—ñ–≤
app.post('/add-parent', (req, res) => {
  const { parent_name, parent_email, child_email } = req.body;
  if (!parent_name || !parent_email || !child_email) return res.status(400).send('–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ');
  db.run(`INSERT INTO parents (parent_name, parent_email, child_email) VALUES (?, ?, ?)`,
    [parent_name, parent_email, child_email], (err) => {
      if (err) return res.status(500).send('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
      res.send('‚úÖ –î–∞–Ω—ñ –±–∞—Ç—å–∫—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
    });
});

// üìå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞—Ç—å–∫—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç—É)
app.get('/all-parents', (req, res) => {
  db.all(`SELECT * FROM parents`, (err, rows) => {
    if (err) return res.status(500).send('–ü–æ–º–∏–ª–∫–∞ –ë–î');
    res.json(rows);
  });
});

// üìå Email-–∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å
app.get('/send-reports', (req, res) => {
  db.all(`SELECT * FROM parents`, (err, parents) => {
    if (err) return res.status(500).send('–ü–æ–º–∏–ª–∫–∞ –∑ –±–∞—Ç—å–∫–∞–º–∏');

    parents.forEach((p) => {
      db.all(`SELECT * FROM students WHERE email = ?`, [p.child_email], (err, students) => {
        if (!students?.length) return;
        const student = students[0];

        db.all(`SELECT * FROM interactions WHERE student_id = ? ORDER BY timestamp DESC LIMIT 5`, [student.id], (err, interactions) => {
          if (err) return;

          let message = `<h3>–ó–≤—ñ—Ç –ø–æ ${student.name}:</h3>`;
          if (interactions.length === 0) {
            message += `<p>–î—ñ—è–ª—å–Ω–æ—Å—Ç—ñ —â–µ –Ω–µ –±—É–ª–æ.</p>`;
          } else {
            interactions.forEach((i) => {
              message += `<p>‚Ä¢ ${i.type} ‚Äî ${i.time_spent}—Å, –ï–º–æ—Ü—ñ—è: ${i.emotion || '–Ω–µ–º–∞—î'}, –ß–∞—Å: ${i.timestamp}</p>`;
            });
          }

          const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
              user: 'focusedplatform@gmail.com',
              pass: 'gflo fmlg nycn pabc'
            }
          });

          transporter.sendMail({
            from: '"FocusEd –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞" <YOUR_EMAIL@gmail.com>',
            to: p.parent_email,
            subject: `–ó–≤—ñ—Ç –ø–æ ${student.name}`,
            html: message
          }, (error, info) => {
            if (error) console.error('‚ùå Email error:', error.message);
            else console.log(`üì§ Email sent to ${p.parent_email}: ${info.response}`);
          });
        });
      });
    });

    res.send('‚úÖ –ó–≤—ñ—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ (—è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –¥–∞–Ω—ñ)');
  });
});

// üìå –¢–µ—Å—Ç
app.get('/', (req, res) => {
  res.send('üîß FocusEd —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î');
});

app.listen(port, '0.0.0.0', () => {
  console.log(`üöÄ Server running on port ${port}`);
});
