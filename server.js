const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const nodemailer = require('nodemailer');

const app = express();
const port = process.env.PORT || 3001;

app.use(cors());
app.use(bodyParser.json());

const db = new sqlite3.Database('./focused.db', (err) => {
  if (err) console.error('‚ùå DB connection error:', err.message);
  else console.log('üü¢ Connected to SQLite database.');
});

// ======= –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å =======
db.run(`CREATE TABLE IF NOT EXISTS students (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT,
  surname TEXT,
  dob TEXT,
  email TEXT UNIQUE,
  password TEXT,
  avatar TEXT,
  learning_style TEXT,
  support_tools INTEGER
)`);

db.run(`CREATE TABLE IF NOT EXISTS parents (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  parent_name TEXT,
  parent_email TEXT,
  child_email TEXT
)`);

db.run(`CREATE TABLE IF NOT EXISTS interactions (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  student_id INTEGER,
  type TEXT,
  duration INTEGER,
  result TEXT,
  emotion TEXT,
  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)`);

// ======= –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è =======
app.post('/register-student', (req, res) => {
  const { name, surname, dob, email, password, avatar, learning_style, support_tools } = req.body;
  if (!email || !password || !name || !surname) return res.status(400).send('–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è.');
  const hashedPassword = bcrypt.hashSync(password, 10);
  const sql = `INSERT INTO students (name, surname, dob, email, password, avatar, learning_style, support_tools)
               VALUES (?, ?, ?, ?, ?, ?, ?, ?)`;
  db.run(sql, [name, surname, dob, email, hashedPassword, avatar, learning_style, support_tools ? 1 : 0], function(err) {
    if (err) {
      if (err.message.includes('UNIQUE constraint failed')) return res.status(409).send('–¢–∞–∫–∏–π email —É–∂–µ —ñ—Å–Ω—É—î.');
      return res.status(500).send('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.');
    }
    res.send('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');
  });
});

// ======= –í—Ö—ñ–¥ =======
app.post('/login', (req, res) => {
  const { email, password } = req.body;
  db.get(`SELECT * FROM students WHERE email = ?`, [email], (err, row) => {
    if (err || !row) return res.status(401).json({ success: false, message: '–ù–µ–≤—ñ—Ä–Ω–∞ –ø–æ—à—Ç–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å.' });
    const match = bcrypt.compareSync(password, row.password);
    if (!match) return res.status(401).json({ success: false, message: '–ù–µ–≤—ñ—Ä–Ω–∞ –ø–æ—à—Ç–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å.' });
    res.json({
      success: true,
      student: {
        id: row.id,
        name: row.name,
        avatar: row.avatar,
        learning_style: row.learning_style
      }
    });
  });
});

// ======= –î–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞—Ç—å–∫–∞ =======
app.post('/add-parent', (req, res) => {
  const { parent_name, parent_email, child_email } = req.body;
  if (!parent_name || !parent_email || !child_email) return res.status(400).send('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è.');
  const sql = `INSERT INTO parents (parent_name, parent_email, child_email) VALUES (?, ?, ?)`;
  db.run(sql, [parent_name, parent_email, child_email], function(err) {
    if (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞—Ç—å–∫–∞:', err.message);
      return res.status(500).send('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.');
    }
    res.send('–î–∞–Ω—ñ –±–∞—Ç—å–∫—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
  });
});

// ======= Email-–∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å =======
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'focusedplatform@gmail.com',
    pass: 'gflo fmlg nycn pabc' // –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∏–π app password —ñ–∑ Google
  }
});

app.post('/send-reports', (req, res) => {
  const sql = `
    SELECT p.parent_email, s.name AS student_name, i.type, i.duration, i.result, i.emotion, i.timestamp
    FROM parents p
    JOIN students s ON s.email = p.child_email
    JOIN interactions i ON i.student_id = s.id
    WHERE i.timestamp >= datetime('now', '-1 day')
    ORDER BY p.parent_email, i.timestamp DESC
  `;
  db.all(sql, [], async (err, rows) => {
    if (err) {
      console.error('‚ùå DB report fetch error:', err.message);
      return res.status(500).send('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤.');
    }

    const grouped = {};
    rows.forEach(row => {
      if (!grouped[row.parent_email]) grouped[row.parent_email] = [];
      grouped[row.parent_email].push(row);
    });

    for (const email in grouped) {
      const entries = grouped[email];
      const student = entries[0].student_name;
      const html = `
        <h2>–ó–≤—ñ—Ç –ø–æ ${student}</h2>
        <ul>
          ${entries.map(e => `<li><b>${e.type}</b>: ${e.duration} —Ö–≤, –µ–º–æ—Ü—ñ—è: ${e.emotion || '–Ω/–¥'}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${e.result || '–Ω/–¥'} <i>(${e.timestamp})</i></li>`).join('')}
        </ul>
      `;
      try {
        await transporter.sendMail({
          from: 'FocusEd –ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å <focusedplatform@gmail.com>',
          to: email,
          subject: `–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –ø–æ ${student}`,
          html
        });
        console.log(`üì© –ó–≤—ñ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: ${email}`);
      } catch (e) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ ${email}:`, e.message);
      }
    }

    res.send('–ó–≤—ñ—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ!');
  });
});

// ======= GET-–≤–µ—Ä—Å—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä =======
app.get('/send-reports', (req, res) => {
  fetch('https://focused-server.onrender.com/send-reports', {
    method: 'POST'
  })
    .then(r => r.text())
    .then(t => res.send(`<pre>${t}</pre>`))
    .catch(e => res.status(500).send('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∑–≤—ñ—Ç—É: ' + e.message));
});

// ======= –Ü–Ω—à–µ =======
app.get('/student/:id', (req, res) => {
  const id = req.params.id;
  db.get(`SELECT id, name, avatar, learning_style FROM students WHERE id = ?`, [id], (err, row) => {
    if (err || !row) return res.status(404).send('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    res.json(row);
  });
});

app.get('/', (req, res) => {
  res.send('üîß FocusEd —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î');
});

app.listen(port, '0.0.0.0', () => {
  console.log(`üöÄ Server running on port ${port}`);
});
